// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String   @unique
  bio       String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles    Article[]  @relation("UserArticles")
  favorites   Article[]  @relation("UserFavorites")
  following   User[]     @relation("UserFollows")
  followedBy  User[]     @relation("UserFollows")

  comments    Comment[]
}

model Article {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String
  body        String   @db.Text
  tagList     Tag[]    @relation("ArticleTags")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commentCount Int     @default(0)
  favoriteCount   Int      @default(0)

  author      User     @relation("UserArticles", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int

  favoritedBy User[]   @relation("UserFavorites")

  comments    Comment[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  articles  Article[] @relation("ArticleTags")
}

model Comment {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  body           String

  authorId       Int
  author         User       @relation(fields: [authorId], references: [id])

  articleId      Int
  article        Article    @relation(fields: [articleId], references: [id])
}
